import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import Layout from '../../components/Layout';
import { useAuthStore } from '../../store/auth';
import styles from '../../styles/CourseView.module.css';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
type Course = {
  id: string;
  title: string;
  description: string;
  imageUrl?: string | null;
  price: number;
  isPublished: boolean;
  createdAt: string;
  updatedAt: string;
  creator: {
    id: string;
    name: string;
  };
  lessons: {
    id: string;
    title: string;
    order: number;
  }[];
  _count: {
    lessons: number;
    enrollments: number;
  };
};

type Enrollment = {
  id: string;
  status: 'PENDING' | 'APPROVED' | 'COMPLETED';
  createdAt: string;
};

export default function CourseView() {
  const router = useRouter();
  const { id } = router.query;
  const { user } = useAuthStore();
  
  const [course, setCourse] = useState<Course | null>(null);
  const [enrollment, setEnrollment] = useState<Enrollment | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isEnrolling, setIsEnrolling] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞
  useEffect(() => {
    const fetchCourse = async () => {
      if (!id) return;
      
      setIsLoading(true);
      setError(null);

      try {
        console.log('Fetching course with ID:', id);
        const response = await fetch(`/api/courses/${id}`);
        
        if (!response.ok) {
          console.error('Error response:', response.status, response.statusText);
          const errorText = await response.text();
          console.error('Error details:', errorText);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å: ${response.status} ${response.statusText}`);
        }

        const data = await response.json();
        console.log('Received course data:', data);
        setCourse(data.course);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∑–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å
        if (user) {
          setEnrollment(data.enrollment || null);
        }
      } catch (error) {
        console.error('Error fetching course:', error);
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        setIsLoading(false);
      }
    };

    if (id) {
      fetchCourse();
    }
  }, [id, user]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å
  const enrollCourse = async () => {
    if (!id || !user) {
      router.push('/login');
      return;
    }
    
    setIsEnrolling(true);
    setError(null);

    try {
      const response = await fetch(`/api/courses/${id}/enroll`, {
        method: 'POST',
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å');
      }

      setEnrollment(data.enrollment);
    } catch (error) {
      console.error('Error enrolling in course:', error);
      setError((error as Error).message);
    } finally {
      setIsEnrolling(false);
    }
  };

  if (isLoading) {
    return (
      <Layout>
        <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </Layout>
    );
  }

  if (error || !course) {
    return (
      <Layout>
        <div className={styles.error}>{error || '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}</div>
        <Link href="/courses" className={styles.backButton}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤
        </Link>
      </Layout>
    );
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
  const renderEnrollmentStatus = () => {
    if (!user) {
      return (
        <div className={styles.enrollmentPrompt}>
          <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å</p>
          <button
            onClick={() => router.push('/login')}
            className={styles.loginButton}
          >
            –í–æ–π—Ç–∏
          </button>
        </div>
      );
    }

    if (enrollment) {
      if (enrollment.status === 'PENDING') {
        return <div className={styles.statusPending}>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</div>;
      } else if (enrollment.status === 'APPROVED') {
        return (
          <div className={styles.statusApproved}>
            –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å
            <button
              onClick={() => router.push(`/student/courses/${course.id}`)}
              className={styles.startLearningButton}
            >
              –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
            </button>
          </div>
        );
      } else if (enrollment.status === 'COMPLETED') {
        return <div className={styles.statusCompleted}>–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω</div>;
      }
    }

    return (
      <button
        onClick={enrollCourse}
        disabled={isEnrolling}
        className={styles.enrollButton}
      >
        {isEnrolling ? '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...' : `–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞ ${course.price} —Ä—É–±.`}
      </button>
    );
  };

  return (
    <Layout>
      <div className={styles.container}>
        <div className={styles.courseHeader}>
          <div className={styles.courseInfo}>
            <h1 className={styles.courseTitle}>{course.title}</h1>
            <div className={styles.courseDetails}>
              <div className={styles.courseAuthor}>
                <span>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</span> {course.creator.name}
              </div>
              <div className={styles.courseStats}>
                <div className={styles.courseStat}>
                  <span>{course._count.lessons}</span> —É—Ä–æ–∫–æ–≤
                </div>
                <div className={styles.courseStat}>
                  <span>{course._count.enrollments}</span> —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                </div>
              </div>
            </div>
          </div>
          <div className={styles.courseActions}>
            {renderEnrollmentStatus()}
          </div>
        </div>

        <div className={styles.courseContent}>
          <div className={styles.courseMainContent}>
            <div className={styles.courseDescription}>
              <h2>–û –∫—É—Ä—Å–µ</h2>
              <div className={styles.descriptionText}>
                {course.description}
              </div>
            </div>

            {course.lessons.length > 0 && (
              <div className={styles.courseLessons}>
                <h2>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞</h2>
                <div className={styles.lessonsList}>
                  {course.lessons
                    .sort((a, b) => a.order - b.order)
                    .map((lesson) => (
                      <div key={lesson.id} className={styles.lessonItem}>
                        <div className={styles.lessonOrder}>{lesson.order}</div>
                        <div className={styles.lessonTitle}>{lesson.title}</div>
                      </div>
                    ))}
                </div>
              </div>
            )}
          </div>

          <div className={styles.courseSidebar}>
            <div className={styles.courseCard}>
              <div className={styles.courseImage}>
                {course.imageUrl ? (
                  <img src={course.imageUrl} alt={course.title} />
                ) : (
                  <div className={styles.placeholderImage}>
                    üìö
                  </div>
                )}
              </div>
              <div className={styles.coursePrice}>
                {course.price > 0 ? `${course.price} —Ä—É–±.` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
              </div>
              <div className={styles.sidebarActions}>
                {renderEnrollmentStatus()}
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}