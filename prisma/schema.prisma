generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String        // Внимание: в реальном проекте пароли должны быть хешированы!
  name          String
  role          Role          @default(STUDENT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  enrollments   Enrollment[]
  createdCourses Course[]      @relation("CourseCreator")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Course {
  id          String       @id @default(uuid())
  title       String
  description String       @db.Text
  imageUrl    String?
  price       Float        @default(0)
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String
  creator     User         @relation("CourseCreator", fields: [creatorId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.Text
  contentJson String?  @db.Text // Структурированное содержимое в формате JSON
  contentType ContentType @default(TEXT)
  mediaUrl    String?   // Ссылка на видео, изображение или другой медиа-контент
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum ContentType {
  TEXT
  VIDEO
  IMAGE
  FILE
  EMBED
}

model Enrollment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    EnrollmentStatus @default(PENDING)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  COMPLETED
}